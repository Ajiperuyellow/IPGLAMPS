//--------------------------------------------------------- -*- c++ -*- ------
//$HeadURL: file:///home/bamps/svn/lib/branches/initialStateLib/src/rangen_distr.h $
//$LastChangedDate: 2014-11-16 22:00:01 +0100 (So, 16. Nov 2014) $
//$LastChangedRevision: 1938 $
//$LastChangedBy: gallmei $
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------


#ifndef RANGEN_DIST_H
#define RANGEN_DIST_H

#include "interpolationGSL.h"
#include "random.h"

/** 
 * @brief This class provides a random generator, where the
 *        cumulative distribution is given via x-y values
 *
 * This class uses interpolationGSL in order to get a continous
 * distribution function.
 *
 * The random numbers are generated by the standard generator ran2.
 *
 * Please note: the y-values have to cover the full [0,1] range in a
 * monotonic increasing way.
 */

class ranGen_Distr
{
  public:
    /**
     * @brief Default Constructor
     **/
    ranGen_Distr() : distr() {};

  
    /**
     * @brief Constructor
     *
     * Here the cumulative probability distribution function is provided
     * by the arrays x[],y[].
     **/
    ranGen_Distr( const double x[], const double y[], const int N, INTERP_TYPE interp_type = interp_linear );
  
    /**
     * @brief Constructor
     *
     * Here the cumulative probability distribution function is provided
     * by the vector<double> types x, y.
     **/
    ranGen_Distr(const std::vector<double>&, const std::vector<double>&, INTERP_TYPE interp_type = interp_linear );
  
    /**
     * @brief Destructor
     **/
    ~ranGen_Distr() {};
  
    /**
     * @brief Generate a random number
     *
     * This is the routine, which does the actual work.
     **/
    double GenerateNumber() { return distr(ran2()); }
  
    /**
     * @brief overloading the () operator
     **/
    double operator()() { return GenerateNumber(); }
  
  
    /**
     * @brief The cdf
     *
     * The cumulative distribution function is given by an interpolation
     * type.
     **/
    interpolationGSL distr;
  
  
  private:
    /**
     * @brief Check the boundaries
     *
     * The CDF has to be defined on the full [0,1] region. It has to be
     * monotonically increasing.
     **/
    void CheckMinMax(void);
  
};

/** 
 * @brief exception class for handling unexpected critical behaviour
 *        within ranGen_Distr
 **/
class ranGen_error : public std::runtime_error
{
  public:
    explicit ranGen_error(const std::string& what) : std::runtime_error(what) {};
  
    virtual ~ranGen_error() throw() {};
};

#endif
